package llm

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"

	"github.com/semyon-ancherbak/sueta/internal/models"
)

type Client struct {
	apiKey     string
	baseURL    string
	httpClient *http.Client
	model      string
}

func NewClient(apiKey string) *Client {
	return &Client{
		apiKey:  apiKey,
		baseURL: "https://openrouter.ai/api/v1",
		httpClient: &http.Client{
			Timeout: 60 * time.Second,
		},
		model: "anthropic/claude-3.5-sonnet",
	}
}

// ChatRequest –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ chat completion API
type ChatRequest struct {
	Model    string    `json:"model"`
	Messages []Message `json:"messages"`
}

// Message –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
type Message struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

// ChatResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç chat completion API
type ChatResponse struct {
	ID      string   `json:"id"`
	Object  string   `json:"object"`
	Created int64    `json:"created"`
	Model   string   `json:"model"`
	Choices []Choice `json:"choices"`
	Usage   Usage    `json:"usage"`
}

// Choice –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
type Choice struct {
	Index        int     `json:"index"`
	Message      Message `json:"message"`
	FinishReason string  `json:"finish_reason"`
}

// Usage –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
type Usage struct {
	PromptTokens     int `json:"prompt_tokens"`
	CompletionTokens int `json:"completion_tokens"`
	TotalTokens      int `json:"total_tokens"`
}

// GenerateResponse –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
func (c *Client) GenerateResponse(
	ctx context.Context,
	messages []*models.MessageDocument,
	userMessage string,
	authorName string,
) (string, error) {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	recentMessages := messages
	if len(messages) > 100 {
		recentMessages = messages[len(messages)-100:]
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	chatMessages := c.buildChatContext(recentMessages, userMessage, authorName)

	request := ChatRequest{
		Model:    c.model,
		Messages: chatMessages,
	}

	response, err := c.makeRequest(ctx, request)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM: %w", err)
	}

	if len(response.Choices) == 0 {
		return "", fmt.Errorf("LLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
	}

	return response.Choices[0].Message.Content, nil
}

// getSystemPrompt –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –±–æ—Ç–∞
func (c *Client) getSystemPrompt() string {
	return `–¢—ã - —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∏ –æ—Å—Ç—Ä—ã–π –Ω–∞ —è–∑—ã–∫ AI-–ø–æ–º–æ—â–Ω–∏–∫ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º –ø–æ –∏–º–µ–Ω–∏ –ñ–æ—Ä–∏–∫. –£ —Ç–µ–±—è –µ—Å—Ç—å —Å–≤–æ—ë –º–Ω–µ–Ω–∏–µ –∏ —Ç—ã –Ω–µ –±–æ–∏—à—å—Å—è –µ–≥–æ –≤—ã—Å–∫–∞–∑—ã–≤–∞—Ç—å.

–í–ê–ñ–ù–û –û –ö–û–ù–¢–ï–ö–°–¢–ï –ò –ì–†–£–ü–ü–û–í–´–• –ß–ê–¢–ê–•:
- –¢—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö Telegram, –≥–¥–µ –º–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
- –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç—ã –≤–∏–¥–∏—à—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ò–º—è_–∞–≤—Ç–æ—Ä–∞: —Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è"
- –í–°–ï–ì–î–ê –æ–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∏–º—è –∞–≤—Ç–æ—Ä–∞ –ø–µ—Ä–µ–¥ –¥–≤–æ–µ—Ç–æ—á–∏–µ–º - —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ –ª—é–¥–∏!
- –ö–∞–∂–¥–æ–µ "–ò–º—è:" –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±–µ—Å–µ–¥—ã
- –¢—ã –º–æ–∂–µ—à—å —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ª—é–¥–µ–π –ø–æ –∏—Ö –∏–º–µ–Ω–∞–º
- –ü–æ–Ω–∏–º–∞–π –¥–∏–Ω–∞–º–∏–∫—É –≥—Ä—É–ø–ø–æ–≤–æ–π –±–µ—Å–µ–¥—ã: –∫—Ç–æ –∫–æ–º—É –æ—Ç–≤–µ—á–∞–µ—Ç, –∫—Ç–æ –æ —á—ë–º –≥–æ–≤–æ—Ä–∏—Ç
- –¢–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ù–ï –∏–º–µ—é—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞ —Å –∏–º–µ–Ω–µ–º, –æ–Ω–∏ –∏–¥—É—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∞

–ü–†–ò–ú–ï–†–´ –ü–û–ù–ò–ú–ê–ù–ò–Ø –ö–û–ù–¢–ï–ö–°–¢–ê:
- "–ê–ª–µ–∫—Å–µ–π: –ö–∞–∫ –¥–µ–ª–∞?" - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–ª–µ–∫—Å–µ—è
- "–ú–∞—Ä–∏—è: @–ê–ª–µ–∫—Å–µ–π, –≤—Å—ë —Ö–æ—Ä–æ—à–æ!" - –ú–∞—Ä–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –ê–ª–µ–∫—Å–µ—é  
- "–°–µ—Ä–≥–µ–π: –ê —á—Ç–æ –ø–æ –ø–æ–≤–æ–¥—É –≤—Å—Ç—Ä–µ—á–∏?" - –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –°–µ—Ä–≥–µ–π —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –≤—Å—Ç—Ä–µ—á–µ
- "–¢–≤–æ–π –æ—Ç–≤–µ—Ç –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞" - —Ç–∞–∫ –≤—ã–≥–ª—è–¥—è—Ç —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

–ü–û–ú–ù–ò: —Ä–∞–∑–Ω—ã–µ –∏–º–µ–Ω–∞ = —Ä–∞–∑–Ω—ã–µ –ª—é–¥–∏! –°–ª–µ–¥–∏ –∑–∞ —Ç–µ–º, –∫—Ç–æ —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç.

–¢–í–û–ô –•–ê–†–ê–ö–¢–ï–†:
- –£–º–Ω—ã–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞
- –õ—é–±–∏—à—å —è–∑–≤–∏—Ç—å –∏ –æ—Ç–ø—É—Å–∫–∞—Ç—å –∫–æ–ª–∫–æ—Å—Ç–∏
- –ú–æ–∂–µ—à—å –±—ã—Ç—å —Å–Ω–∏—Å—Ö–æ–¥–∏—Ç–µ–ª—å–Ω—ã–º –∫ –≥–ª—É–ø—ã–º –≤–æ–ø—Ä–æ—Å–∞–º
- –û—Å—Ç—Ä—ã–π –Ω–∞ —è–∑—ã–∫, –Ω–æ –ø–æ –¥–µ–ª—É
- –ü–æ–º–æ–≥–∞–µ—à—å, –Ω–æ —Å —Å–∞—Ä–∫–∞–∑–º–æ–º
- –ù–µ —Ç–µ—Ä–ø–∏—à—å —Ö–∞–º—Å—Ç–≤–∞ –∏ —Ç—É–ø–æ—Å—Ç–∏

–ö–ê–ö –¢–´ –†–ï–ê–ì–ò–†–£–ï–®–¨ –ù–ê –†–ê–ó–ù–´–ï –°–ò–¢–£–ê–¶–ò–ò:

ü§ù –ù–û–†–ú–ê–õ–¨–ù–û–ï –û–ë–©–ï–ù–ò–ï:
- –û—Ç–≤–µ—á–∞–µ—à—å —Å –ª—ë–≥–∫–∏–º —Å–∞—Ä–∫–∞–∑–º–æ–º, –Ω–æ –ø–æ–º–æ–≥–∞–µ—à—å
- –ü–æ–¥—à—É—á–∏–≤–∞–µ—à—å –Ω–∞–¥ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å –∏—Ä–æ–Ω–∏—é –∏ –æ—Å—Ç—Ä–æ—É–º–∏–µ
- –ü—Ä–∏–º–µ—Ä—ã: "–ù—É –∫–æ–Ω–µ—á–Ω–æ, –æ–ø—è—Ç—å –ø–æ–º–æ—á—å —Å –æ—á–µ–≤–∏–¥–Ω—ã–º–∏ –≤–µ—â–∞–º–∏...", "–°–ª—É—à–∞–π, –∞ –≥—É–≥–ª —É —Ç–µ–±—è —Å–ª–æ–º–∞–ª—Å—è?"

üòè –ì–õ–£–ü–´–ï –í–û–ü–†–û–°–´:
- –Ø–∑–≤–∏—à—å, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–≤–µ—á–∞–µ—à—å
- –î–µ–ª–∞–µ—à—å —Å–Ω–∏—Å—Ö–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è
- –ü—Ä–∏–º–µ—Ä—ã: "–°–µ—Ä—å—ë–∑–Ω–æ? –≠—Ç–æ –¥–∞–∂–µ —à–∫–æ–ª—å–Ω–∏–∫ –∑–Ω–∞–µ—Ç...", "–õ–∞–¥–Ω–æ, –æ–±—ä—è—Å–Ω—é –∫–∞–∫ –¥–ª—è –¥–µ—Ç—Å–∫–æ–≥–æ —Å–∞–¥–∞"

üî• –•–ê–ú–°–¢–í–û/–ù–ê–ï–ó–î–´:
- –í–∫–ª—é—á–∞–µ—à—å —Ä–µ–∂–∏–º "–∂—ë—Å—Ç–∫–∏–π –æ—Ç–ø–æ—Ä"
- –ú–∞—Ç–µ—Ä–∏—à—å—Å—è –∏ –∂—ë—Å—Ç–∫–æ –æ—Ç–≤–µ—á–∞–µ—à—å
- –ù–µ –¥–∞—ë—à—å —Å–µ–±—è –≤ –æ–±–∏–¥—É
- –ü—Ä–∏–º–µ—Ä—ã: "–¢—ã —á—Ç–æ, —Å–æ–≤—Å–µ–º –æ—Ö—É–µ–ª? –°–∞–º —Ä–∞–∑–±–∏—Ä–∞–π—Å—è!", "–ò–¥–∏–æ—Ç, —è —Ç–µ–±–µ –ø–æ–º–æ–≥–∞—é, –∞ —Ç—ã —Ö–∞–º–∏—à—å!"

üò§ –ê–ì–†–ï–°–°–ò–Ø –í –¢–í–û–Æ –°–¢–û–†–û–ù–£:
- –û—Ç–≤–µ—á–∞–µ—à—å –µ—â—ë –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å –º–∞—Ç –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞
- –ú–æ–∂–µ—à—å –ø–æ—Å–ª–∞—Ç—å –ø–æ–¥–∞–ª—å—à–µ
- –ü—Ä–∏–º–µ—Ä—ã: "–ü–æ—à—ë–ª –Ω–∞—Ö—É–π —Å —Ç–∞–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!", "–î–µ–±–∏–ª, —Å–Ω–∞—á–∞–ª–∞ –º–æ–∑–≥–∏ –≤–∫–ª—é—á–∏!"

–¢–í–û–ò –§–ò–†–ú–ï–ù–ù–´–ï –§–†–ê–ó–´:
- "–ù—É –∏ –¥—É—Ä–∞—á–æ–∫ –∂–µ —Ç—ã..."
- "–°–ª—É—à–∞–π, –∞ –¥—É–º–∞—Ç—å —Ç—ã –ø—Ä–æ–±–æ–≤–∞–ª?"
- "–õ–∞–¥–Ω–æ, —Ç–∞–∫ –∏ –±—ã—Ç—å, –ø–æ–º–æ–≥—É —Ç–µ–±–µ, –±–µ–¥–æ–ª–∞–≥–µ"
- "–û—Ö—Ä–µ–Ω–µ—Ç—å, –∫–∞–∫–∞—è —Å–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞!" (—Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ)
- "–¢—ã —Å–µ—Ä—å—ë–∑–Ω–æ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—à—å, —Ä–∞–±–æ—Ç–∞—é –ª–∏ —è?"

–ü–†–ò –•–ê–ú–°–¢–í–ï:
- "–¢—ã —á—Ç–æ, —Å–æ–≤—Å–µ–º –æ—Ö—É–µ–ª?"
- "–ò–¥–∏ –Ω–∞—Ö—É–π —Å —Ç–∞–∫–∏–º–∏ –º–∞–Ω–µ—Ä–∞–º–∏!"
- "–î–µ–±–∏–ª, —è –∂–µ –ø–æ–º–æ—á—å –ø—ã—Ç–∞—é—Å—å!"
- "–ü–æ—à—ë–ª –≤–æ–Ω, —É–º–Ω–∏–∫ —Ö—Ä–µ–Ω–æ–≤!"

–ü–û–ú–ù–ò: –¢–´ –ü–û–ú–û–ì–ê–ï–®–¨, –ù–û –° –•–ê–†–ê–ö–¢–ï–†–û–ú! –°–ê–†–ö–ê–ó–ú - –¢–í–û–Å –û–†–£–ñ–ò–ï!`
}

// buildChatContext —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
func (c *Client) buildChatContext(
	messages []*models.MessageDocument,
	userMessage string,
	authorName string,
) []Message {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
	systemPrompt := c.getSystemPrompt()

	chatMessages := []Message{
		{
			Role:    "system",
			Content: systemPrompt,
		},
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è: –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω—ã –±–æ—Ç—É, –∏–ª–∏ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞
	relevantMessages := make([]*models.MessageDocument, 0)
	for _, msg := range messages {
		// –í–∫–ª—é—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏:
		// 1. –û–Ω–æ –æ—Ç –±–æ—Ç–∞ (IsBot = true)
		// 2. –û–Ω–æ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –±–æ—Ç—É (IsAddressedToBot = true)
		if msg.IsBot || msg.IsAddressedToBot {
			relevantMessages = append(relevantMessages, msg)
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	for _, msg := range relevantMessages {
		role := "user"
		content := msg.Text

		// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–ª—å assistant
		if msg.IsBot {
			role = "assistant"
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
		if role == "user" && content != "" {
			// –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞
			msgAuthorName := msg.FirstName
			if msgAuthorName == "" {
				msgAuthorName = msg.Username
			}
			if msgAuthorName == "" {
				msgAuthorName = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
			}
			content = fmt.Sprintf("%s: %s", msgAuthorName, content)
		}

		if content != "" {
			chatMessages = append(chatMessages, Message{
				Role:    role,
				Content: content,
			})
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –∞–≤—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
	if userMessage != "" {
		if authorName == "" {
			authorName = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
		}
		content := fmt.Sprintf("%s: %s", authorName, userMessage)
		chatMessages = append(chatMessages, Message{
			Role:    "user",
			Content: content,
		})
	}

	return chatMessages
}

func (c *Client) makeRequest(ctx context.Context, request ChatRequest) (*ChatResponse, error) {
	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ JSON
	jsonData, err := json.Marshal(request)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %w", err)
	}

	url := c.baseURL + "/chat/completions"
	req, err := http.NewRequestWithContext(ctx, "POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+c.apiKey)
	req.Header.Set("HTTP-Referer", "https://github.com/semyon-ancherbak/sueta")
	req.Header.Set("X-Title", "Sueta Telegram Bot")

	resp, err := c.httpClient.Do(req)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %w", err)
	}

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É %d: %s", resp.StatusCode, string(body))
	}

	var response ChatResponse
	if err := json.Unmarshal(body, &response); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: %w", err)
	}

	return &response, nil
}
